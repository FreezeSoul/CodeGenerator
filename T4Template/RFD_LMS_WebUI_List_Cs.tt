<#@ template language="C#" hostspecific="false"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System"
#><#@ import namespace="System.CodeDom"
#><#@ import namespace="System.CodeDom.Compiler"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Data.Linq"
#><#@ import namespace="System.Data.Linq.Mapping"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Xml.Linq"
#><#@ import namespace="Microsoft.SqlServer.Management.Smo" 
#><#@ import namespace="Microsoft.SqlServer.Management.Common" 
#><#@include file="T4Template\DevHelper.ttinclude"
#><#@include file="T4Template\AdoHelper.ttinclude"
#><#@include file="T4Template\SmoHelper.ttinclude"
#><#@ parameter name="ConnectionString" type="System.String" 
#><#@ parameter name="DataBaseName" type="System.String" 
#><#@ parameter name="SelectedName" type="System.String" 
#><#@ parameter name="SelectedColumns" type="System.Collections.Generic.List<System.String>"
#><#

var NameSpaceName = ".Permission";

var adoHelper = new AdoHelper();
var smoHelper = new SmoHelper();

Database database = smoHelper.Connect(ConnectionString,DataBaseName);
database.Refresh();
database.Tables.Refresh();

if(database.Tables.Contains(SelectedName))
{
	Table table = database.Tables[SelectedName];
	table.Refresh();
	table.Columns.Refresh();
	
	table.ExtendedProperties.Refresh();
	string tabledescribe = table.ExtendedProperties["MS_Description"]==null?table.Name: table.ExtendedProperties["MS_Description"].Value.ToString();
	
	string primaryKeyType = string.Empty;
	string primaryKeyName = string.Empty;
	List<Column> pKeyColumns = adoHelper.GetPrimaryKeys(table);
	primaryKeyType = pKeyColumns.Count>0?adoHelper.ChangeToCSharpType(pKeyColumns[0].DataType.ToString()):adoHelper.ChangeToCSharpType(table.Columns[0].DataType.ToString());
	primaryKeyName = pKeyColumns.Count>0?pKeyColumns[0].Name:table.Columns[0].Name;
	
	List<Column> tempColumns = new List<Column>();
	foreach(Column column in table.Columns)
	{
		if(SelectedColumns.Contains(column.Name))
		{
			column.Refresh();
			tempColumns.Add(column);
		}
	}
#>using System;
using System.Collections.Generic;
using System.Data;
using System.Web.UI;
using System.Web.UI.WebControls;
using LMS.Util;
using RFD.LMS.Model;
using RFD.LMS.Model<#= NameSpaceName #>;
using RFD.LMS.Service;
using RFD.LMS.Service<#= NameSpaceName #>;

namespace RFD.LMS.WebUI<#= NameSpaceName #>
{
    public partial class <#= table.Name #>_List : PageBase
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                BuidPage();//页面加载的时候绑定。
                BindDropDownList();
            }
            // 注册分页用户控件事件处理
            if (IsPostBack)
            {
                Pager1.PagerPageChanged += new EventHandler(AspNetPager_PageChanged);
            }
        }


        /// <summary>
        /// 分页
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void AspNetPager_PageChanged(object sender, EventArgs e)
        {
            BuidPage();
        }

        /// <summary>
        /// 查询并绑定GridView
        /// </summary>
        private void BuidPage()
        {
            DataTable dataTable = DtSource();
            int tbRowCount = dataTable.Rows.Count;
            if (tbRowCount == 0)
            {
                dataTable.Rows.Add(dataTable.NewRow());
            }
            //分页
            Pager1.RecordCount = dataTable.Rows.Count;
            PagedDataSource pds = new PagedDataSource();
            pds.AllowPaging = true;
            pds.PageSize = Pager1.PageSize;
            pds.CurrentPageIndex = Pager1.CurrentPageIndex - 1;
            pds.DataSource = dataTable.DefaultView;

            GridView1.DataSource = pds;
            GridView1.DataBind();
            int columnCount = GridView1.Columns.Count;
            //如果数据为空
            if (tbRowCount == 0)
            {
                GridView1.Rows[0].Cells.Clear();
                GridView1.Rows[0].Cells.Add(new TableCell());
                GridView1.Rows[0].Cells[0].ColumnSpan = columnCount;
                GridView1.Rows[0].Cells[0].Text = "没有数据";
                GridView1.Rows[0].Cells[0].Style.Add("text-align", "center");
            }
        }

        private void BindDropDownList()
        {
            
        }

        /// <summary>
        /// 获取数据源
        /// </summary>
        /// <returns></returns>
        private DataTable DtSource()
        {
            //实例化业务层
            var server = ServiceLocator.GetService<I<#= table.Name #>Service>();
            var model = new <#= table.Name #>();
			var searchParams = new Dictionary<string, object>();
			//ToDo:查询条件
            DataTable dataTable = server.GetDataTable(searchParams);
            return dataTable;
        }


        /// <summary>
        /// 查询信息
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnQuery_Click(object sender, EventArgs e)
        {
            BuidPage();
        }

        protected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                
            }
        }

        protected void GridView1_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "DeleteById")
            {
                var key = <#= primaryKeyType #>.Parse(e.CommandArgument.ToString());
                var server = ServiceLocator.GetService<I<#= table.Name #>Service>();
                server.Delete(key);
                BuidPage();
                Alert("删除成功！");
            }
        }

    }
}
<# 
}
#>