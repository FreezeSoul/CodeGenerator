<#@ template language="C#" hostspecific="false"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System"
#><#@ import namespace="System.CodeDom"
#><#@ import namespace="System.CodeDom.Compiler"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Data.Linq"
#><#@ import namespace="System.Data.Linq.Mapping"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Xml.Linq"
#><#@ import namespace="Microsoft.SqlServer.Management.Smo" 
#><#@ import namespace="Microsoft.SqlServer.Management.Common" 
#><#@include file="T4Template\DevHelper.ttinclude"
#><#@include file="T4Template\AdoHelper.ttinclude"
#><#@include file="T4Template\SmoHelper.ttinclude"
#><#@ parameter name="ConnectionString" type="System.String" 
#><#@ parameter name="DataBaseName" type="System.String" 
#><#@ parameter name="SelectedName" type="System.String" 
#><#@ parameter name="SelectedColumns" type="System.Collections.Generic.List<System.String>"
#><#

var NameSpaceName = ".Permission";

var adoHelper = new AdoHelper();
var smoHelper = new SmoHelper();

Database database = smoHelper.Connect(ConnectionString,DataBaseName);
database.Refresh();
database.Tables.Refresh();

if(database.Tables.Contains(SelectedName))
{
	Table table = database.Tables[SelectedName];
	table.Refresh();
	table.Columns.Refresh();
	
	table.ExtendedProperties.Refresh();
	string tabledescribe = table.ExtendedProperties["MS_Description"]==null?table.Name: table.ExtendedProperties["MS_Description"].Value.ToString();
	
	string primaryKeyType = string.Empty;
	string primaryKeyName = string.Empty;
	List<Column> pKeyColumns = adoHelper.GetPrimaryKeys(table);
	primaryKeyType = pKeyColumns.Count>0?adoHelper.ChangeToCSharpType(pKeyColumns[0].DataType.ToString()):adoHelper.ChangeToCSharpType(table.Columns[0].DataType.ToString());
	primaryKeyName = pKeyColumns.Count>0?pKeyColumns[0].Name:table.Columns[0].Name;
	
	List<Column> tempColumns = new List<Column>();
	foreach(Column column in table.Columns)
	{
		if(SelectedColumns.Contains(column.Name))
		{
			column.Refresh();
			if(!column.InPrimaryKey)
				tempColumns.Add(column);
		}
	}
#>using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using LMS.Common.Utility;
using LMS.Util;
using RFD.LMS.Model;
using RFD.LMS.Model<#= NameSpaceName #>;
using RFD.LMS.Service;
using RFD.LMS.Service<#= NameSpaceName #>;

namespace RFD.LMS.WebUI<#= NameSpaceName #>
{
    public partial class <#= table.Name #>_Edit : PageBase
    {

        private I<#= table.Name #>Service service = ServiceLocator.GetService<I<#= table.Name #>Service>();

        #region Property
        private string <#= primaryKeyName #>
        {
            get
            {
                return Request.Params["<#= primaryKeyName #>"] != null ? Request.Params["<#= primaryKeyName #>"].ToString() : string.Empty;
            }
        }
        #endregion

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                BindDropDownList();
                BindEditData();
            }
        }

        private void BindEditData()
        {
            if (<#= primaryKeyName #> != string.Empty)
            {
                var model = service.GetModel(<#= primaryKeyType #>.Parse(<#= primaryKeyName #>));
                if (model != null)
                {
					//TODO:绑定数据
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void BindDropDownList()
        {
            
        }

        protected void BtnSave_Click(object sender, EventArgs e)
        {
            try
            {
                if (<#= primaryKeyName #> != string.Empty)
                {
                    var key =<#= primaryKeyType #>.Parse(<#= primaryKeyName #>);
                    service.Update(new <#= table.Name #>()
                    {
                       //TODO:初始化修改数据
                    });
                }
                else
                {
                   	service.Add(new <#= table.Name #>()
                    {
                       //TODO:初始化修改数据
                    });
                }
				Alert("保存成功!");
            }
            catch (Exception)
            {
                Alert("存储失败，请重试!");
            }
        }
    }
}
<# 
}
#>